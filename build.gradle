/*******************************************************************************
 * Copyright 2017 Mircea Nistor
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

import org.gradle.internal.os.OperatingSystem

import java.nio.file.Files

group 'ro.mirceanistor.stf'
version '0.6'

apply plugin: 'groovy'

repositories {
    jcenter()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile "org.mockito:mockito-core:2.8.47"

    compile "commons-cli:commons-cli:1.3.1"

    compile 'org.codehaus.groovy:groovy:2.4.7'
    compile 'org.codehaus.groovy:groovy-xml:2.4.7'
    compile 'org.codehaus.groovy:groovy-json:2.4.7'

    compile "org.codehaus.gpars:gpars:1.2.1"
    compile 'org.codehaus.jsr166-mirror:jsr166y:1.7.0'

    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7'
}

def mainClassName = "${group}.MainClass"

/**
 * create a single Jar with all dependencies
 */
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'stf connection tool',
                'Implementation-Version': version,
                'Main-Class': mainClassName
    }
    baseName = project.name + '-all'
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar

    artifacts.add('archives', tasks["fatJar"])
}

/**
 * Run the installation task to add te newly created `stf` executable to `$HOME/.local/bin`
 * Probably won't work on windows
 */
task install(dependsOn: fatJar) {
    outputs.upToDateWhen { false }
    doLast {
        configurations.archives.allArtifacts.each {
            if (it.name == "${project.name}-all".toString()) {
                def sep = File.separator
                def installDir = "${System.getProperty("user.home")}${sep}.local${sep}stf-connect"
                def jarName = it.getFile().name
                def jarLocation = "${installDir}${sep}${jarName}"
                def installLocation = "${installDir}${sep}stfc"
                def artifactLocation = it.getFile()
                def symlinkPath = new File("${System.getProperty("user.home")}${sep}.local${sep}bin${sep}stfc").toPath()

                copy {
                    from "$artifactLocation"
                    into "$installDir"
                }

                if (OperatingSystem.current().isWindows()) {

                    //create bat bootstrap
                    def batStrap = new File("${installLocation}.bat")
                    batStrap.text = "@echo off\n"
                    batStrap.text += "java -jar \"${jarLocation}\" %*"

                    logger.lifecycle("\nCreated bat bootstrap in ${installDir}.")

                    //add install directory to STFC_HOME user variable
                    def stfcHome = "STFC_HOME"

                    //add STFC_HOME to PATH (user scope)
                    def queryProcess = "REG QUERY HKCU\\Environment /v PATH".execute()

                    def userPath = ""
                    if (queryProcess.waitFor() == 0) {

                        //"PATH" variable already exists in the user space
                        //sanitize the output to extract the data
                        def rawOutput = queryProcess.text.tokenize(" ")
                        rawOutput = rawOutput.subList(3, (int) rawOutput.size)
                        userPath = rawOutput.join(" ").trim()

                        if (userPath[-1] != ";") {
                            userPath += ";"
                        }
                    }

                    if (!userPath.contains("%${stfcHome}%")) {

                        userPath += "%${stfcHome}%"

                        //SETX command could not be used here because it's limited to 1024 chars
                        "REG ADD HKCU\\Environment /v PATH /t REG_EXPAND_SZ /d \"${userPath}\" /f".execute()
                    }

                    //SETX at the end to trigger a WM_SETTINGCHANGE event so that we don't need to restart to reload %PATH%
                    "SETX ${stfcHome} \"${installDir}\"".execute()

                    logger.lifecycle("\nThe bootstrap location was added to PATH.")

                } else {
                    //create bash bootstrap
                    def bashStrap = new File(installLocation)
                    bashStrap.text = "#!/bin/bash\n"
                    bashStrap.text += "java -jar \"${jarLocation}\" \$@"
                    bashStrap.setExecutable(true, true)
                    //symlink to the bash script
                    try {
                        Files.delete(symlinkPath)
                    } catch (IOException ex) {
                        logger.debug("there was an exception when trying to delete old symlink:", ex)
                    }
                    Files.createDirectories(symlinkPath.parent)
                    Files.createSymbolicLink(symlinkPath, new File(installLocation).toPath())

                    logger.lifecycle("\nCreated \"stfc\" bootstrap in \"${installDir}\".\n" +
                            "Add it to your PATH if you want global access")
                }

            } else {
                logger.debug "skipping installation for thin archive ${it.getFile()}"
            }
        }
    }
}